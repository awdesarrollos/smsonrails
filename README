SmsOnRails
==========

Sms on Rails provides instance access to SMS through Email Gateway or with Clickatell

The models and underlying architecture extend and include a ton of modules
and are designed to be configured if necessary. If you do not wish to run the
vanilla configuration, copy the vendor/plugins/sms_on_rails/lib/models to your
local models directory.

A lot of care has gone into the locking mechanims to prevent double sends. This
is a precursor to mass Smsing machine. Further detailed configuration is necessary. Contact
blythe@snowgiraffe.com if you love grapes.

Coming soon very rough admin controller stubs.

Version -1.0.0 Very much under development

Setup
=======
1. Install Plugin and Dependencies
script/plugin git://github.com/blythedunham/smsonrails.git
script/plugin git://github.com/blythedunham/static_record_cache.git
gem install clickatell   (Clickatell users only)

2. rake sms:setup (generator with migration coming soon.)
Or copy vendor/plugins/sms_on_rails/db/schema.db to a migration

2. Get an account with clickatell (git://github.com/blythedunham/smsonrails.git)
or setup your email in your rails app

3. Edit your applications configuration in environment.rb with settings and password.
 Also include all models in you config.rb if you wish to use the vanilla settings.

----- ENVIRONMENT.RB -----------------
SmsOnRails::ServiceProviders::Clickatell.config =
  {
   :api_id => 'api_key',
   :user_name => 'user_name',
   :password => 'password'
  }

SmsOnRails::ServiceProviders::EmailGateway.config =
  {
   :sender => 'youremail address',
   :subject => 'Default Subject Text'
   #:bcc => nil,
   #:mailer_klass => nil,
  }

#Default inherits from ActionMailer
#SmsOnRails::ServiceProviders::EmailGatewaySupport::SmsMailer.smtp_settings ={}


Uncomment out your default SMS sender
#SmsOnRails::ServiceProviders::Base.default_service_provider ||= SmsOnRails::ServiceProviders::Clickatell.instance
#SmsOnRails::ServiceProviders::Base.default_service_provider ||= SmsOnRails::ServiceProviders::EmailGateway.instance

require 'sms_on_rails/all_models'
----- ENVIRONMENT.RB -----------------


4. GO!

#Clickatell does not need a carrier
SmsOnRails::Outbound.create_sms '12065551234', 'Send this test message', :send_immediately => true

#Email gateway needs a carrier specified
sms = SmsOnRails::Outbound.create_sms '12065551234', 'Send this test message', :carrier => :att
sms.deliver!


# All service providers are singletons and can be accessed by their instance
#
# To send a message without validation
#  SmsOnRails::ServiceProviders::<Provider>.instance.send_message '12065551234', 'my message', options
#
# To send a message with validation use send_to_phone_number with a string or SmsOnRails::PhoneNumber instance
#  SmsOnRails::ServiceProviders<Provider>.instance.send_to_phone_number(number, message, options)
#
# To send an sms(with validation)
#  SmsOnRails::ServiceProviders<Provider>.instance.send_sms(sms, options)
# However, it is preferred to use the locking mechanism to prevent double messages from being sent
#   sms.deliver!
#


Copyright (c) 2009 Blythe Dunham, released under the MIT license
