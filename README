SmsOnRails
==========

Sms on Rails provides instance access to SMS through Email Gateway or with Clickatell

The models and underlying architecture extend and include a ton of modules
and are designed to be configured if necessary. If you do not wish to run the
vanilla configuration, copy the vendor/plugins/sms_on_rails/lib/models to your
local models directory.

A lot of care has gone into the locking mechanims to prevent double sends. This
is a precursor to mass Smsing machine. Further detailed configuration is necessary. Contact
blythe@snowgiraffe.com if you love grapes.


Version 0.1.0


Setup
=======
1. Install
> script/plugin install git://github.com/blythedunham/smsonrails.git

2. Configure
> script/generate sms_on_rails setup
For more options, run use the --help option

3. Acquire Email and/or SMS Accounts
Get an account with clickatell (git://github.com/blythedunham/smsonrails.git) or setup your email settings

4. Migrate
You can modify the newly generated migration file or run the vanilla
> rake db:migrate

5. Edit your applications configuration in environment.rb with settings and password.

----- ENVIRONMENT.RB -----------------
SmsOnRails::ServiceProviders::Clickatell.config =
  {
   :api_id => 'api_key',
   :user_name => 'user_name',
   :password => 'password'
  }

SmsOnRails::ServiceProviders::EmailGateway.config =
  {
   :sender => 'youremail address',
   :subject => 'Default Subject Text'
   #:bcc => nil,
   #:mailer_klass => nil,
  }

#Default inherits from ActionMailer
#SmsOnRails::ServiceProviders::EmailGatewaySupport::SmsMailer.smtp_settings ={}


Uncomment out your default SMS sender
SmsOnRails::ServiceProviders::Base.default_service_provider = SmsOnRails::ServiceProviders::Clickatell.instance
#SmsOnRails::ServiceProviders::Base.default_service_provider = SmsOnRails::ServiceProviders::EmailGateway.instance

----- ENVIRONMENT.RB -----------------


GO!

Default Pages
Send SMS: http://localhost:3000/sms/new
Admin: http://localhost:3000/admin/sms

ORM examples:
#Clickatell does not need a carrier
SmsOnRails::Outbound.create_sms '12065551234', 'Send this test message', :send_immediately => true

#Email gateway needs a carrier specified
sms = SmsOnRails::Outbound.create_sms '12065551234', 'Send this test message', :carrier => :att
sms.deliver!


# All service providers are singletons and can be accessed by their instance
#
# To send a message without validation
#  SmsOnRails::ServiceProviders::<Provider>.instance.send_message '12065551234', 'my message', options
#
# To send a message with validation use send_to_phone_number with a string or SmsOnRails::PhoneNumber instance
#  SmsOnRails::ServiceProviders<Provider>.instance.send_to_phone_number(number, message, options)
#
# To send an sms(with validation)
#  SmsOnRails::ServiceProviders<Provider>.instance.send_sms(sms, options)
# However, it is preferred to use the locking mechanism to prevent double messages from being sent
#   sms.deliver!
#


Copyright (c) 2009 Blythe Dunham, released under the MIT license
